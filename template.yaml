apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: contador-template
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: contador
    name: contador
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: contador
      deploymentconfig: contador
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      openshift.io/image.dockerRepositoryCheck: 2018-10-30T14:59:25Z
    creationTimestamp: null
    generation: 4
    labels:
      app: contador
    name: contador
  spec:
    tags:
    - annotations:
        openshift.io/imported-from: docker.pnet.ch/misc/contador
      from:
        kind: DockerImage
        name: docker.pnet.ch/misc/contador:latest
      generation: 4
      importPolicy: {}
      name: latest
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 1
    labels:
      app: contador
    name: contador
  spec:
    replicas: 1
    selector:
      app: contador
      deploymentconfig: contador
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.contador.image.entrypoint: '["node","index.js"]'
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: contador
          deploymentconfig: contador
      spec:
        containers:
        - image: ""
          imagePullPolicy: Always
          name: contador
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          env:
            - name: SYSTEM_ENV
              value: dev
            - name: SYSTEM_INSTANCE
              value: demo-stao
            - name: SERVICE_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName 
            - name: SERVICE_PORT
              value: "3000"
            - name: SERVICE_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name          
            - name: METRIC_HOST
              value: localhost
            - name: METRIC_PORT
              value: "2003"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - contador
        from:
          kind: ImageStreamTag
          name: contador:latest
          namespace: bovetl-demo
      type: ImageChange
  status: {}
